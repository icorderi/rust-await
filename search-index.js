var searchIndex = {};
searchIndex["await"] = {"doc":"Core primitives for building asynchronous stuff","items":[[3,"AwaitValue","await","When they need an `Await&lt;T&gt;` and there is no need to wait",null,null],[0,"examples","","Examples on crates representing different _Async_ abstractions",null,null],[0,"promise","await::examples","_&quot;Crate&quot;_ for rerpresenting the _async_ abstraction of **promises / futures**",null,null],[3,"Future","await::examples::promise","At some point in time, it will hold a value `T`",null,null],[3,"Promise","","Used to fulfill a promise (in other words, complete the `Future`)",null,null],[3,"PromiseDroppedError","","Signals that the `Promise` dropped before being fullfilled. _Liar..._",null,null],[11,"clone","","",0,{"inputs":[{"name":"promise"}],"output":{"name":"promise"}}],[11,"fmt","","",1,{"inputs":[{"name":"promisedroppederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a promise from anything that can be _await&#39;ed_",2,null],[11,"constant","","Create a `Future` that holds a _constant_ value... **it&#39;s a present!** _(no pun intended...)_",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deferred","","Create a `Future` from an `Await`",2,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"poll","","Returns a _ref_ to the value `T` if present",2,{"inputs":[{"name":"future"}],"output":{"name":"option"}}],[11,"value","","Returns a _ref_ to the value `T`, _awaits_ for the value if it&#39;s not available",2,{"inputs":[{"name":"future"}],"output":{"name":"t"}}],[11,"set","","Fullfill a promise",0,{"inputs":[{"name":"promise"},{"name":"t"}],"output":{"name":"option"}}],[11,"success","","Deliver a successful result",0,{"inputs":[{"name":"promise"},{"name":"t"}],"output":{"name":"option"}}],[11,"fail_with","","Deliver a failure",0,{"inputs":[{"name":"promise"},{"name":"e"}],"output":{"name":"option"}}],[11,"await","","",2,{"inputs":[{"name":"future"}],"output":{"name":"t"}}],[0,"async","await::examples","Helper functions",null,null],[5,"spawn","await::examples::async","Starts a new `Thread` and executes the `Await` there.\nThis method returns immediatly.",null,{"inputs":[{"name":"a"}],"output":{"name":"joinhandle"}}],[5,"run_synchronously","","Runs the `Await` on the current thread and **wont** return until the result is ready.",null,{"inputs":[{"name":"a"}],"output":{"name":"t"}}],[5,"parallel","","Forks all the `Await`&#39;s in parallel.",null,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[5,"await_all","","Returns an `Await` that will _await_ for **all** inputs to finish and produce a `Vec`\nwith the results.\nThis method returns immediatly.",null,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[5,"await_all_box","","Returns an `Await` that will _await_ for **all** inputs to finish and produce a `Vec`\nwith the results.\nThis method returns immediatly.",null,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[5,"any","","Returns an `Await` that will _await_ for **any** of the inputs to finish.\nThis method returns immediatly.",null,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[0,"io","await","Traits defining **Asynchronous** IO",null,null],[8,"ReadAsync","await::io","The `ReadAsync` trait allows for reading bytes from a source **asynchronously**.",null,null],[10,"read_async","","",3,null],[8,"WriteAsync","","A trait for objects which are byte-oriented **asynchronous** sinks.",null,null],[10,"write_async","","",4,null],[10,"flush_async","","",4,{"inputs":[{"name":"writeasync"}],"output":{"name":"box"}}],[11,"await","std::thread","",5,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"read_async","std::net::tcp","",6,null],[11,"write_async","","",6,null],[11,"flush_async","","",6,{"inputs":[{"name":"tcpstream"}],"output":{"name":"box"}}],[11,"read_async","std::fs","",7,null],[11,"write_async","","",7,null],[11,"flush_async","","",7,{"inputs":[{"name":"file"}],"output":{"name":"box"}}],[8,"Await","await","Represents then notion of something that we **could** have to _await_ for.",null,null],[10,"await","","It will return a value when it&#39;s ready",8,{"inputs":[{"name":"await"}],"output":{"name":"t"}}],[8,"AwaitBox","","`AwaitBox` is a version of the `Await` intended for use with _boxed_\nobjects.",null,null],[10,"await_box","","",9,{"inputs":[{"name":"awaitbox"}],"output":{"name":"t"}}],[11,"await","alloc::boxed","",10,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"await","","",10,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"await","await","",11,{"inputs":[{"name":"awaitvalue"}],"output":{"name":"t"}}]],"paths":[[3,"Promise"],[3,"PromiseDroppedError"],[3,"Future"],[8,"ReadAsync"],[8,"WriteAsync"],[3,"JoinHandle"],[3,"TcpStream"],[3,"File"],[8,"Await"],[8,"AwaitBox"],[3,"Box"],[3,"AwaitValue"]]};
initSearch(searchIndex);
